import "Main";

namespace C;

/// Equivalent to C's `FILE` type.  Should not be used directly.
export struct C.File {
    _: C.Char,
}

/// An index into a file.
export struct C.Fpos {
    _: C.SizeT,
}

export func "fclose" as C.Fclose(file: ~mut C.File) -> C.Int;
export func "clearerr" as C.Clearerr(file: ~mut C.File);
export func "feof" as C.Feof(file: ~mut C.File) -> C.Int;
export func "ferror" as C.Ferror(file: ~mut C.File) -> C.Int;
export func "fflush" as C.Fflush(file: ~mut C.File) -> C.Int;
export func "fgetpos" as C.Fgetpos(file: ~mut C.File, pos: ~mut C.Fpos) -> C.Int;
export func "fopen" as C.Fopen(filename: ~const C.Char, mode: ~const C.Char) -> ~mut C.File;
export func "fread" as C.Fread(ptr: ~mut C.Char, size: C.SizeT, nitems: C.SizeT, file: ~mut C.File) -> C.SizeT;
export func "freopen" as C.Freopen(filename: ~const C.Char, mode: ~const C.Char, file: ~mut C.File) -> ~mut C.File;
export func "fseek" as C.Fseek(file: ~mut C.File, offset: C.Int, whence: C.Int) -> C.Int;
export func "fsetpos" as C.Fsetpos(file: ~mut C.File, pos: ~const C.Fpos) -> C.Int;
export func "ftell" as C.Ftell(file: ~mut C.File) -> C.Int;
export func "fwrite" as C.Fwrite(ptr: ~const C.Char, size: C.SizeT, nitems: C.SizeT, file: ~mut C.File) -> C.SizeT;
export func "remove" as C.Remove(filename: ~const C.Char) -> C.Int;
export func "rename" as C.Rename(old: ~const C.Char, new: ~const C.Char) -> C.Int;
export func "rewind" as C.Rewind(file: ~mut C.File);
export func "setbuf" as C.Setbuf(file: ~mut C.File, buf: ~mut C.Char);
export func "setvbuf" as C.Setvbuf(file: ~mut C.File, buf: ~mut C.Char, mode: C.Int, size: C.SizeT) -> C.Int;
export func "tmpfile" as C.Tmpfile() -> ~mut C.File;
export func "tmpnam" as C.Tmpnam(s: ~mut C.Char) -> ~mut C.Char;
export func "fprintf" as C.Fprintf(file: ~mut C.File, format: ~const C.Char, ...) -> C.Int;
export func "printf" as C.Printf(format: ~const C.Char, ...) -> C.Int;
export func "sprintf" as C.Sprintf(s: ~mut C.Char, format: ~const C.Char, ...) -> C.Int;
export func "vfprintf" as C.Vfprintf(file: ~mut C.File, format: ~const C.Char, ap: ~mut C.Char) -> C.Int; // todo va_list type
export func "vprintf" as C.Vprintf(format: ~const C.Char, ap: ~mut C.Char) -> C.Int; // todo va_list type
export func "vsprintf" as C.Vsprintf(s: ~mut C.Char, format: ~const C.Char, ap: ~mut C.Char) -> C.Int; // todo va_list type
export func "fscanf" as C.Fscanf(file: ~mut C.File, format: ~const C.Char, ...) -> C.Int;
export func "scanf" as C.Scanf(format: ~const C.Char, ...) -> C.Int;
export func "sscanf" as C.Sscanf(s: ~const C.Char, format: ~const C.Char, ...) -> C.Int;
export func "fgetc" as C.Fgetc(file: ~mut C.File) -> C.Int;
export func "fgets" as C.Fgets(s: ~mut C.Char, n: C.SizeT, file: ~mut C.File) -> ~mut C.Char;
export func "fputc" as C.Fputc(c: C.Int, file: ~mut C.File) -> C.Int;
export func "fputs" as C.Fputs(s: ~const C.Char, file: ~mut C.File) -> C.Int;
export func "getc" as C.Getc(file: ~mut C.File) -> C.Int;
export func "getchar" as C.Getchar() -> C.Int;
export func "gets" as C.Gets(s: ~mut C.Char) -> ~mut C.Char;
export func "putc" as C.Putc(c: C.Int, file: ~mut C.File) -> C.Int;
export func "putchar" as C.Putchar(c: C.Int) -> C.Int;
export func "puts" as C.Puts(s: ~const C.Char) -> C.Int;
export func "ungetc" as C.Ungetc(c: C.Int, file: ~mut C.File) -> C.Int;
export func "perror" as C.Perror(s: ~const C.Char);