namespace Std;

/// A basic slice type that can be used to get the length and pointer values of an Amp slice.
struct BasicSlice {
    ptr: ~const u8,
    len: uint,
}

/// Returns the number of items in the provided slice.
export func Std.SliceLen(slice: []const u8) -> uint {
    var slice = (~const slice) as ~const BasicSlice;
    return slice.len;
}

/// Creates a slice from the provided pointer value and length.
///
/// NOTE: will be removed in future versions in favor of `ptr[0..len]`.
export func Std.SliceFromPtr(ptr: ~const u8, len: uint) -> []const u8 {
    var slice = BasicSlice .{
        ptr = ptr,
        len = len,
    };
    return *((~const slice) as ~const []const u8);
}

/// Creates a mutable slice from the provided pointer value and length.
///
/// NOTE: will be removed in future versions in favor of `ptr[0..len]`.
export func Std.SliceFromPtrMut(ptr: ~mut u8, len: uint) -> []mut u8 {
    var slice = BasicSlice .{
        ptr = ptr,
        len = len,
    };
    return *((~const slice) as ~const []mut u8);
}


/// Copies the source slice to the destination slice.
///
/// The source slice will be truncated to the length of the destination slice.
///
/// # Safety
/// - The provided slices should not overlap.
export func Std.Copy(dest: []mut u8, src: []const u8) {
    var n: uint;

    if Std.SliceLen(dest) < Std.SliceLen(src) {
        n = Std.SliceLen(dest);
    } else {
        n = Std.SliceLen(src);
    }

    var dest = dest as ~mut u8;
    var src = src as ~const u8;
    
    // Copy the data:
    var i: uint = 0;
    while i < n {
        *((dest as uint + i) as ~mut u8) = *((src as uint + i) as ~const u8);
        i = i + 1;
    }
}